#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18408
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyWebSite.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TFbase")]
	public partial class TFbaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertReports(Reports instance);
    partial void UpdateReports(Reports instance);
    partial void DeleteReports(Reports instance);
    partial void InsertPrefMusic(PrefMusic instance);
    partial void UpdatePrefMusic(PrefMusic instance);
    partial void DeletePrefMusic(PrefMusic instance);
    partial void InsertVoting(Voting instance);
    partial void UpdateVoting(Voting instance);
    partial void DeleteVoting(Voting instance);
    partial void InsertCounter(Counter instance);
    partial void UpdateCounter(Counter instance);
    partial void DeleteCounter(Counter instance);
    partial void Insertip_counter(ip_counter instance);
    partial void Updateip_counter(ip_counter instance);
    partial void Deleteip_counter(ip_counter instance);
    #endregion
		
		public TFbaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TFbaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TFbaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TFbaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Reports> Reports
		{
			get
			{
				return this.GetTable<Reports>();
			}
		}
		
		public System.Data.Linq.Table<PrefMusic> PrefMusic
		{
			get
			{
				return this.GetTable<PrefMusic>();
			}
		}
		
		public System.Data.Linq.Table<Voting> Voting
		{
			get
			{
				return this.GetTable<Voting>();
			}
		}
		
		public System.Data.Linq.Table<Counter> Counter
		{
			get
			{
				return this.GetTable<Counter>();
			}
		}
		
		public System.Data.Linq.Table<ip_counter> ip_counter
		{
			get
			{
				return this.GetTable<ip_counter>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reports")]
	public partial class Reports : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _uid;
		
		private System.Nullable<System.DateTime> _date;
		
		private string _content;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnuidChanging(string value);
    partial void OnuidChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void OncontentChanging(string value);
    partial void OncontentChanged();
    #endregion
		
		public Reports()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uid", DbType="NVarChar(50)")]
		public string uid
		{
			get
			{
				return this._uid;
			}
			set
			{
				if ((this._uid != value))
				{
					this.OnuidChanging(value);
					this.SendPropertyChanging();
					this._uid = value;
					this.SendPropertyChanged("uid");
					this.OnuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_content", DbType="NVarChar(MAX)")]
		public string content
		{
			get
			{
				return this._content;
			}
			set
			{
				if ((this._content != value))
				{
					this.OncontentChanging(value);
					this.SendPropertyChanging();
					this._content = value;
					this.SendPropertyChanged("content");
					this.OncontentChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PrefMusic")]
	public partial class PrefMusic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _vote_ip;
		
		private string _style;
		
		private int _id;
		
		private EntityRef<Voting> _Voting;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onvote_ipChanging(string value);
    partial void Onvote_ipChanged();
    partial void OnstyleChanging(string value);
    partial void OnstyleChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public PrefMusic()
		{
			this._Voting = default(EntityRef<Voting>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vote_ip", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string vote_ip
		{
			get
			{
				return this._vote_ip;
			}
			set
			{
				if ((this._vote_ip != value))
				{
					if (this._Voting.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onvote_ipChanging(value);
					this.SendPropertyChanging();
					this._vote_ip = value;
					this.SendPropertyChanged("vote_ip");
					this.Onvote_ipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_style", DbType="NVarChar(20)")]
		public string style
		{
			get
			{
				return this._style;
			}
			set
			{
				if ((this._style != value))
				{
					this.OnstyleChanging(value);
					this.SendPropertyChanging();
					this._style = value;
					this.SendPropertyChanged("style");
					this.OnstyleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Voting_PrefMusic", Storage="_Voting", ThisKey="vote_ip", OtherKey="ip", IsForeignKey=true)]
		public Voting Voting
		{
			get
			{
				return this._Voting.Entity;
			}
			set
			{
				Voting previousValue = this._Voting.Entity;
				if (((previousValue != value) 
							|| (this._Voting.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Voting.Entity = null;
						previousValue.PrefMusic.Remove(this);
					}
					this._Voting.Entity = value;
					if ((value != null))
					{
						value.PrefMusic.Add(this);
						this._vote_ip = value.ip;
					}
					else
					{
						this._vote_ip = default(string);
					}
					this.SendPropertyChanged("Voting");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Voting")]
	public partial class Voting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ip;
		
		private string _name;
		
		private string _email;
		
		private System.Nullable<int> _rate;
		
		private string _text;
		
		private EntitySet<PrefMusic> _PrefMusic;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnipChanging(string value);
    partial void OnipChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnrateChanging(System.Nullable<int> value);
    partial void OnrateChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    #endregion
		
		public Voting()
		{
			this._PrefMusic = new EntitySet<PrefMusic>(new Action<PrefMusic>(this.attach_PrefMusic), new Action<PrefMusic>(this.detach_PrefMusic));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ip", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ip
		{
			get
			{
				return this._ip;
			}
			set
			{
				if ((this._ip != value))
				{
					this.OnipChanging(value);
					this.SendPropertyChanging();
					this._ip = value;
					this.SendPropertyChanged("ip");
					this.OnipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(40)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(40)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rate", DbType="Int")]
		public System.Nullable<int> rate
		{
			get
			{
				return this._rate;
			}
			set
			{
				if ((this._rate != value))
				{
					this.OnrateChanging(value);
					this.SendPropertyChanging();
					this._rate = value;
					this.SendPropertyChanged("rate");
					this.OnrateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NVarChar(MAX)")]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Voting_PrefMusic", Storage="_PrefMusic", ThisKey="ip", OtherKey="vote_ip")]
		public EntitySet<PrefMusic> PrefMusic
		{
			get
			{
				return this._PrefMusic;
			}
			set
			{
				this._PrefMusic.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PrefMusic(PrefMusic entity)
		{
			this.SendPropertyChanging();
			entity.Voting = this;
		}
		
		private void detach_PrefMusic(PrefMusic entity)
		{
			this.SendPropertyChanging();
			entity.Voting = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Counter")]
	public partial class Counter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _uid;
		
		private System.Nullable<int> _count;
		
		private System.Nullable<System.DateTime> _last;
		
		private System.Nullable<int> _today;
		
		private string _secret;
		
		private System.Nullable<System.DateTime> _lastusing;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuidChanging(string value);
    partial void OnuidChanged();
    partial void OncountChanging(System.Nullable<int> value);
    partial void OncountChanged();
    partial void OnlastChanging(System.Nullable<System.DateTime> value);
    partial void OnlastChanged();
    partial void OntodayChanging(System.Nullable<int> value);
    partial void OntodayChanged();
    partial void OnsecretChanging(string value);
    partial void OnsecretChanged();
    partial void OnlastusingChanging(System.Nullable<System.DateTime> value);
    partial void OnlastusingChanged();
    #endregion
		
		public Counter()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uid", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string uid
		{
			get
			{
				return this._uid;
			}
			set
			{
				if ((this._uid != value))
				{
					this.OnuidChanging(value);
					this.SendPropertyChanging();
					this._uid = value;
					this.SendPropertyChanged("uid");
					this.OnuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_count", DbType="Int")]
		public System.Nullable<int> count
		{
			get
			{
				return this._count;
			}
			set
			{
				if ((this._count != value))
				{
					this.OncountChanging(value);
					this.SendPropertyChanging();
					this._count = value;
					this.SendPropertyChanged("count");
					this.OncountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last", DbType="DateTime")]
		public System.Nullable<System.DateTime> last
		{
			get
			{
				return this._last;
			}
			set
			{
				if ((this._last != value))
				{
					this.OnlastChanging(value);
					this.SendPropertyChanging();
					this._last = value;
					this.SendPropertyChanged("last");
					this.OnlastChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_today", DbType="Int")]
		public System.Nullable<int> today
		{
			get
			{
				return this._today;
			}
			set
			{
				if ((this._today != value))
				{
					this.OntodayChanging(value);
					this.SendPropertyChanging();
					this._today = value;
					this.SendPropertyChanged("today");
					this.OntodayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_secret", DbType="NChar(32)")]
		public string secret
		{
			get
			{
				return this._secret;
			}
			set
			{
				if ((this._secret != value))
				{
					this.OnsecretChanging(value);
					this.SendPropertyChanging();
					this._secret = value;
					this.SendPropertyChanged("secret");
					this.OnsecretChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastusing", DbType="DateTime")]
		public System.Nullable<System.DateTime> lastusing
		{
			get
			{
				return this._lastusing;
			}
			set
			{
				if ((this._lastusing != value))
				{
					this.OnlastusingChanging(value);
					this.SendPropertyChanging();
					this._lastusing = value;
					this.SendPropertyChanged("lastusing");
					this.OnlastusingChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ip_counter")]
	public partial class ip_counter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ip;
		
		private System.Nullable<System.DateTime> _last_using;
		
		private System.Nullable<System.DateTime> _last_visit;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnipChanging(string value);
    partial void OnipChanged();
    partial void Onlast_usingChanging(System.Nullable<System.DateTime> value);
    partial void Onlast_usingChanged();
    partial void Onlast_visitChanging(System.Nullable<System.DateTime> value);
    partial void Onlast_visitChanged();
    #endregion
		
		public ip_counter()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ip", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ip
		{
			get
			{
				return this._ip;
			}
			set
			{
				if ((this._ip != value))
				{
					this.OnipChanging(value);
					this.SendPropertyChanging();
					this._ip = value;
					this.SendPropertyChanged("ip");
					this.OnipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_using", DbType="DateTime")]
		public System.Nullable<System.DateTime> last_using
		{
			get
			{
				return this._last_using;
			}
			set
			{
				if ((this._last_using != value))
				{
					this.Onlast_usingChanging(value);
					this.SendPropertyChanging();
					this._last_using = value;
					this.SendPropertyChanged("last_using");
					this.Onlast_usingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_visit", DbType="DateTime")]
		public System.Nullable<System.DateTime> last_visit
		{
			get
			{
				return this._last_visit;
			}
			set
			{
				if ((this._last_visit != value))
				{
					this.Onlast_visitChanging(value);
					this.SendPropertyChanging();
					this._last_visit = value;
					this.SendPropertyChanged("last_visit");
					this.Onlast_visitChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
